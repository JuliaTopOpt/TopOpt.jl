var documenterSearchIndex = {"docs":
[{"location":"reference/Algorithms/#Algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"This sub-module of TopOpt defines a number of standard topology optimization algorithms.","category":"page"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"CurrentModule = TopOpt.Algorithms","category":"page"},{"location":"reference/Algorithms/#Outer-Optimizer","page":"Algorithms","title":"Outer Optimizer","text":"","category":"section"},{"location":"reference/Algorithms/#Abstract-type","page":"Algorithms","title":"Abstract type","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"TODO.","category":"page"},{"location":"reference/Algorithms/#SIMP","page":"Algorithms","title":"SIMP","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"SIMP","category":"page"},{"location":"reference/Algorithms/#TopOpt.Algorithms.SIMP","page":"Algorithms","title":"TopOpt.Algorithms.SIMP","text":"The vanilla SIMP algorithm, see M. P. Bendsøe  (1989).\n\n\n\n\n\n","category":"type"},{"location":"reference/Algorithms/#Continuous-CSIMP","page":"Algorithms","title":"Continuous CSIMP","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"ContinuationSIMP","category":"page"},{"location":"reference/Algorithms/#TopOpt.Algorithms.ContinuationSIMP","page":"Algorithms","title":"TopOpt.Algorithms.ContinuationSIMP","text":"Continuous SIMP algorithm, see Mohamed Tarek , Tapabrata Ray  (2020).\n\n\n\n\n\n","category":"type"},{"location":"reference/Algorithms/#BESO","page":"Algorithms","title":"BESO","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"BESO","category":"page"},{"location":"reference/Algorithms/#TopOpt.Algorithms.BESO","page":"Algorithms","title":"TopOpt.Algorithms.BESO","text":"The BESO algorithm, see Xiaodong Huang , Yi-Min Xie  (2010).\n\n\n\n\n\n","category":"type"},{"location":"reference/Algorithms/#GESO","page":"Algorithms","title":"GESO","text":"","category":"section"},{"location":"reference/Algorithms/","page":"Algorithms","title":"Algorithms","text":"GESO","category":"page"},{"location":"reference/Algorithms/#TopOpt.Algorithms.GESO","page":"Algorithms","title":"TopOpt.Algorithms.GESO","text":"The GESO algorithm, see Xia Liu , Wei-Jian Yi , Q. S. Li , Pu-Sheng Shen  (2008).\n\n\n\n\n\n","category":"type"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"EditURL = \"https://github.com/mohamed82008/TopOpt.jl/blob/master/docs/src/literate/csimp.jl\"","category":"page"},{"location":"examples/csimp/#Continuous-SIMP-example","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"tip: Tip\nThis example is also available as a Jupyter notebook: csimp.ipynb","category":"page"},{"location":"examples/csimp/#Commented-Program","page":"Continuous SIMP example","title":"Commented Program","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"What follows is a program spliced with comments. The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"using TopOpt","category":"page"},{"location":"examples/csimp/#Define-the-problem","page":"Continuous SIMP example","title":"Define the problem","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"E = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0 # downward force\n\nproblems = Any[\n            PointLoadCantilever(Val{:Linear}, (60, 20, 20), (1.0, 1.0, 1.0), E, v, f),\n            PointLoadCantilever(Val{:Linear}, (160, 40), (1.0, 1.0), E, v, f),\n            HalfMBB(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n            LBeam(Val{:Linear}, Float64, force = f),\n            TieBeam(Val{:Quadratic}, Float64)\n            ]\nproblem_names = [\n    \"3d cantilever beam\",\n    \"cantilever beam\",\n    \"half MBB beam\",\n    \"L-beam\",\n    \"tie-beam\",\n    ]\n\ni = 2\nprintln(problem_names[i])\nproblem = problems[i]","category":"page"},{"location":"examples/csimp/#Parameter-settings","page":"Continuous SIMP example","title":"Parameter settings","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"V = 0.5 # volume fraction\nxmin = 0.001 # minimum density\nrmin = 3.0\nsteps = 40 # maximum number of penalty steps, delta_p0 = 0.1\nreuse = true # adaptive penalty flag\n\nconvcriteria = Nonconvex.GenericCriteria()\npenalty = TopOpt.PowerPenalty(1.0)\npcont = Continuation(penalty, steps = steps, xmin = xmin, pmax = 5.0)","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"NOTE: non-convexity + computational error lead to different solutions that satisfy the KKT tolerance","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"mma_options = options = Nonconvex.MMAOptions(maxiter=1000)\nmaxtol = 0.01 # maximum tolerance\nmintol = 0.0001 # minimum tolerance\nb = log(mintol / maxtol) / steps\na = maxtol / exp(b)\nmma_options_gen = TopOpt.MMAOptionsGen(\n    steps = steps,\n    initial_options = mma_options,\n    ftol_gen = ExponentialContinuation(a, b, 0.0, steps + 1, mintol),\n)\ncsimp_options = TopOpt.CSIMPOptions(\n    steps = steps,\n    options_gen = mma_options_gen,\n    p_gen = pcont,\n    reuse = reuse,\n)","category":"page"},{"location":"examples/csimp/#Define-a-finite-element-solver","page":"Continuous SIMP example","title":"Define a finite element solver","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"solver = FEASolver(Displacement, Direct, problem, xmin = xmin, penalty = penalty)","category":"page"},{"location":"examples/csimp/#Define-compliance-objective","page":"Continuous SIMP example","title":"Define compliance objective","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"comp = Compliance(problem, solver)\nfilter = if problem isa TopOptProblems.TieBeam\n    identity\nelse\n    DensityFilter(solver, rmin = rmin)\nend\nobj = x -> comp(filter(x))","category":"page"},{"location":"examples/csimp/#Define-volume-constraint","page":"Continuous SIMP example","title":"Define volume constraint","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"volfrac = TopOpt.Volume(problem, solver)\nconstr = x -> volfrac(filter(x)) - V","category":"page"},{"location":"examples/csimp/#Define-subproblem-optimizer","page":"Continuous SIMP example","title":"Define subproblem optimizer","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"x0 = fill(V, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = mma_options, convcriteria = convcriteria,\n)","category":"page"},{"location":"examples/csimp/#Define-continuation-SIMP-optimizer","page":"Continuous SIMP example","title":"Define continuation SIMP optimizer","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"simp = SIMP(optimizer, solver, penalty.p)\ncont_simp = ContinuationSIMP(simp, steps, csimp_options)","category":"page"},{"location":"examples/csimp/#Solve","page":"Continuous SIMP example","title":"Solve","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"result = cont_simp(x0)\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval","category":"page"},{"location":"examples/csimp/#(Optional)-Visualize-the-result-using-Makie.jl","page":"Continuous SIMP example","title":"(Optional) Visualize the result using Makie.jl","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"Need to run using Pkg; Pkg.add(Makie) first","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"using TopOpt.TopOptProblems.Visualization: visualize\nfig = visualize(problem; topology = result.topology,\n    problem; topology = result.topology, default_exagg_scale = 0.07,\n    scale_range = 10.0, vector_linewidth = 3, vector_arrowsize = 0.5,\n)\nMakie.display(fig)","category":"page"},{"location":"examples/csimp/#csimp-plain-program","page":"Continuous SIMP example","title":"Plain Program","text":"","category":"section"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"Below follows a version of the program without any comments. The file is also available here: csimp.jl","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"using TopOpt\n\nE = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0 # downward force\n\nproblems = Any[\n            PointLoadCantilever(Val{:Linear}, (60, 20, 20), (1.0, 1.0, 1.0), E, v, f),\n            PointLoadCantilever(Val{:Linear}, (160, 40), (1.0, 1.0), E, v, f),\n            HalfMBB(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n            LBeam(Val{:Linear}, Float64, force = f),\n            TieBeam(Val{:Quadratic}, Float64)\n            ]\nproblem_names = [\n    \"3d cantilever beam\",\n    \"cantilever beam\",\n    \"half MBB beam\",\n    \"L-beam\",\n    \"tie-beam\",\n    ]\n\ni = 2\nprintln(problem_names[i])\nproblem = problems[i]\n\nV = 0.5 # volume fraction\nxmin = 0.001 # minimum density\nrmin = 3.0\nsteps = 40 # maximum number of penalty steps, delta_p0 = 0.1\nreuse = true # adaptive penalty flag\n\nconvcriteria = Nonconvex.GenericCriteria()\npenalty = TopOpt.PowerPenalty(1.0)\npcont = Continuation(penalty, steps = steps, xmin = xmin, pmax = 5.0)\n\nmma_options = options = Nonconvex.MMAOptions(maxiter=1000)\nmaxtol = 0.01 # maximum tolerance\nmintol = 0.0001 # minimum tolerance\nb = log(mintol / maxtol) / steps\na = maxtol / exp(b)\nmma_options_gen = TopOpt.MMAOptionsGen(\n    steps = steps,\n    initial_options = mma_options,\n    ftol_gen = ExponentialContinuation(a, b, 0.0, steps + 1, mintol),\n)\ncsimp_options = TopOpt.CSIMPOptions(\n    steps = steps,\n    options_gen = mma_options_gen,\n    p_gen = pcont,\n    reuse = reuse,\n)\n\nsolver = FEASolver(Displacement, Direct, problem, xmin = xmin, penalty = penalty)\n\ncomp = Compliance(problem, solver)\nfilter = if problem isa TopOptProblems.TieBeam\n    identity\nelse\n    DensityFilter(solver, rmin = rmin)\nend\nobj = x -> comp(filter(x))\n\nvolfrac = TopOpt.Volume(problem, solver)\nconstr = x -> volfrac(filter(x)) - V\n\nx0 = fill(V, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = mma_options, convcriteria = convcriteria,\n)\n\nsimp = SIMP(optimizer, solver, penalty.p)\ncont_simp = ContinuationSIMP(simp, steps, csimp_options)\n\nresult = cont_simp(x0)\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"","category":"page"},{"location":"examples/csimp/","page":"Continuous SIMP example","title":"Continuous SIMP example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/TopOptProblems/#TopOptProblems","page":"TopOptProblems","title":"TopOptProblems","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"This sub-module of TopOpt defines a number of standard topology optimization problems for the convenient testing of algorithms.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"CurrentModule = TopOpt.TopOptProblems","category":"page"},{"location":"reference/TopOptProblems/#Problem-types","page":"TopOptProblems","title":"Problem types","text":"","category":"section"},{"location":"reference/TopOptProblems/#Abstract-type","page":"TopOptProblems","title":"Abstract type","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"StiffnessTopOptProblem is an abstract type that a number of linear elasticity, quasi-static, topology optimization problems subtype.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"StiffnessTopOptProblem","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.StiffnessTopOptProblem","page":"TopOptProblems","title":"TopOpt.TopOptProblems.StiffnessTopOptProblem","text":"abstract type StiffnessTopOptProblem{dim, T} <: AbstractTopOptProblem end\n\nAn abstract stiffness topology optimization problem. All subtypes must have the following fields:\n\nch: a Ferrite.ConstraintHandler struct\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#Test-problems","page":"TopOptProblems","title":"Test problems","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"The following types are all concrete subtypes of StiffnessTopOptProblem. PointLoadCantilever is a cantilever beam problem with a point load as shown below. HalfMBB is the half Messerschmitt-Bölkow-Blohm (MBB) beam problem commonly used in topology optimization literature. LBeam and TieBeam are the common L-beam and tie-beam test problem used in topology optimization literature. The PointLoadCantilever and HalfMBB problems can be either 2D or 3D depending on the type of the inputs to the constructor. If the number of elements and sizes of elements are 2-tuples, the problem constructed will be 2D. And if they are 3-tuples, the problem constructed will be 3D. For the 3D versions, the point loads are applied at approximately the mid-depth point. The TieBeam and LBeam problems are always 2D.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"PointLoadCantilever\nPointLoadCantilever(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim}, E, ν, force) where {dim, CellType}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.PointLoadCantilever-Union{Tuple{CellType}, Tuple{dim}, Tuple{Type{Val{CellType}}, Tuple{Vararg{Int64, dim}}, Tuple{Vararg{T, dim}} where T, Any, Any, Any}} where {dim, CellType}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.PointLoadCantilever","text":"PointLoadCantilever(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim}, E, ν, force) where {dim, CellType}\n\ndim: dimension of the problem\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nnels: number of elements in each direction, a 2-tuple for 2D problems and a 3-tuple for 3D problems\nsizes: the size of each element in each direction, a 2-tuple for 2D problems and a 3-tuple for 3D problems\nCellType: can be either :Linear or :Quadratic to determine the order of the geometric and field basis functions and element type. Only isoparametric elements are supported for now.\n\nExample:\n\nnels = (60,20);\nsizes = (1.0,1.0);\nE = 1.0;\nν = 0.3;\nforce = 1.0;\n\n# Linear elements and linear basis functions\ncelltype = :Linear\n\n# Quadratic elements and quadratic basis functions\n#celltype = :Quadratic\n\nproblem = PointLoadCantilever(Val{celltype}, nels, sizes, E, ν, force)\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"HalfMBB\nHalfMBB(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim}, E, ν, force) where {dim, CellType}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.HalfMBB","page":"TopOptProblems","title":"TopOpt.TopOptProblems.HalfMBB","text":" |\n |\n v\nO*********************************\nO*                               *\nO*                               *\nO*                               *\nO*********************************\n                                 O\n\nstruct HalfMBB{dim, T, N, M} <: StiffnessTopOptProblem{dim, T}\n    rect_grid::RectilinearGrid{dim, T, N, M}\n    E::T\n    ν::T\n    ch::ConstraintHandler{<:DofHandler{dim, <:Cell{dim,N,M}, T}, T}\n    force::T\n    force_dof::Integer\n    black::AbstractVector\n    white::AbstractVector\n    varind::AbstractVector{Int}\n    metadata::Metadata\nend\n\ndim: dimension of the problem\nT: number type for computations and coordinates\nN: number of nodes in a cell of the grid\nM: number of faces in a cell of the grid\nrect_grid: a RectilinearGrid struct\nE: Young's modulus\nν: Poisson's ration\nforce: force at the top left of half the MBB (positive is downward)\nforce_dof: dof number at which the force is applied\nch: a Ferrite.ConstraintHandler struct\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.HalfMBB-Union{Tuple{CellType}, Tuple{dim}, Tuple{Type{Val{CellType}}, Tuple{Vararg{Int64, dim}}, Tuple{Vararg{T, dim}} where T, Any, Any, Any}} where {dim, CellType}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.HalfMBB","text":"HalfMBB(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim}, E, ν, force) where {dim, CellType}\n\ndim: dimension of the problem\nE: Young's modulus\nν: Poisson's ration\nforce: force at the top left of half the MBB (positive is downward)\nnels: number of elements in each direction, a 2-tuple for 2D problems and a 3-tuple for 3D problems\nsizes: the size of each element in each direction, a 2-tuple for 2D problems and a 3-tuple for 3D problems\nCellType: can be either :Linear or :Quadratic to determine the order of the geometric and field basis functions and element type. Only isoparametric elements are supported for now.\n\nExample:\n\nnels = (60,20);\nsizes = (1.0,1.0);\nE = 1.0;\nν = 0.3;\nforce = -1.0;\n\n# Linear elements and linear basis functions\ncelltype = :Linear\n\n# Quadratic elements and quadratic basis functions\n#celltype = :Quadratic\n\nproblem = HalfMBB(Val{celltype}, nels, sizes, E, ν, force)\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"LBeam\nLBeam(::Type{Val{CellType}}, ::Type{T}=Float64; length = 100, height = 100, upperslab = 50, lowerslab = 50, E = 1.0, ν = 0.3, force = 1.0) where {T, CellType}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.LBeam","page":"TopOptProblems","title":"TopOpt.TopOptProblems.LBeam","text":"////////////\n............\n.          .\n.          .\n.          . \n.          .                    \n.          ......................\n.                               .\n.                               . \n.                               . |\n................................. v\n                                force\n\nstruct LBeam{T, N, M} <: StiffnessTopOptProblem{2, T}\n    E::T\n    ν::T\n    ch::ConstraintHandler{<:DofHandler{2, <:Cell{2,N,M}, T}, T}\n    force::T\n    force_dof::Integer\n    black::AbstractVector\n    white::AbstractVector\n    varind::AbstractVector{Int}\n    metadata::Metadata\nend\n\nT: number type for computations and coordinates\nN: number of nodes in a cell of the grid\nM: number of faces in a cell of the grid\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nforce_dof: dof number at which the force is applied\nch: a Ferrite.ConstraintHandler struct\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.LBeam-Union{Tuple{Type{Val{CellType}}}, Tuple{CellType}, Tuple{T}, Tuple{Type{Val{CellType}}, Type{T}}} where {T, CellType}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.LBeam","text":"LBeam(::Type{Val{CellType}}, ::Type{T}=Float64; length = 100, height = 100, upperslab = 50, lowerslab = 50, E = 1.0, ν = 0.3, force = 1.0) where {T, CellType}\n\nT: number type for computations and coordinates\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nlength, height, upperslab and lowerslab are explained in LGrid.\nCellType: can be either :Linear or :Quadratic to determine the order of the geometric and field basis functions and element type. Only isoparametric elements are supported for now.\n\nExample:\n\nE = 1.0;\nν = 0.3;\nforce = 1.0;\n\n# Linear elements and linear basis functions\ncelltype = :Linear\n\n# Quadratic elements and quadratic basis functions\n#celltype = :Quadratic\n\nproblem = LBeam(Val{celltype}, E = E, ν = ν, force = force)\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"TieBeam\nTieBeam(::Type{Val{CellType}}, ::Type{T} = Float64, refine = 1, force = T(1); E = T(1), ν = T(0.3)) where {T, CellType}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.TieBeam","page":"TopOptProblems","title":"TopOpt.TopOptProblems.TieBeam","text":"                                                               1\n                                                               \n                                                              OOO\n                                                              ...\n                                                              . .\n                                                           4  . . \n                                30                            . .   \n/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . <-\n/ .                                                                 . <- 2 f \n/ .    3                                                            . <- \n/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . <-\n                                                              ^^^\n                                                              |||\n                                                              1 f\n\nstruct TieBeam{T, N, M} <: StiffnessTopOptProblem{2, T}\n    E::T\n    ν::T\n    force::T\n    ch::ConstraintHandler{<:DofHandler{2, N, T, M}, T}\n    black::AbstractVector\n    white::AbstractVector\n    varind::AbstractVector{Int}\n    metadata::Metadata\nend\n\nT: number type for computations and coordinates\nN: number of nodes in a cell of the grid\nM: number of faces in a cell of the grid\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nch: a Ferrite.ConstraintHandler struct\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.TieBeam-Union{Tuple{Type{Val{CellType}}}, Tuple{CellType}, Tuple{T}, Tuple{Type{Val{CellType}}, Type{T}}, Tuple{Type{Val{CellType}}, Type{T}, Any}, Tuple{Type{Val{CellType}}, Type{T}, Any, Any}} where {T, CellType}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.TieBeam","text":"TieBeam(::Type{Val{CellType}}, ::Type{T} = Float64, refine = 1, force = T(1); E = T(1), ν = T(0.3)) where {T, CellType}\n\nT: number type for computations and coordinates\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nrefine: an integer value of 1 or greater that specifies the mesh refinement extent. A value of 1 gives the standard tie-beam problem in literature.\nCellType: can be either :Linear or :Quadratic to determine the order of the geometric and field basis functions and element type. Only isoparametric elements are supported for now.\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/#Reading-INP-Files","page":"TopOptProblems","title":"Reading INP Files","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"In TopOpt.jl, you can import a .inp file to an instance of the problem struct InpStiffness. This can be used to construct problems with arbitrary unstructured ground meshes, complex boundary condition domains and load specifications. The .inp file can be exported from a number of common finite element software such as: FreeCAD or ABAQUS.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"InpStiffness\nInpStiffness(filepath_with_ext::AbstractString; keep_load_cells = false)","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.InputOutput.INP.InpStiffness","page":"TopOptProblems","title":"TopOpt.TopOptProblems.InputOutput.INP.InpStiffness","text":"struct InpStiffness{dim, N, TF, TI, TBool, Tch <: ConstraintHandler, GO, TInds <: AbstractVector{TI}, TMeta<:Metadata} <: StiffnessTopOptProblem{dim, TF}\n    inp_content::InpContent{dim, TF, N, TI}\n    geom_order::Type{Val{GO}}\n    ch::Tch\n    black::TBool\n    white::TBool\n    varind::TInds\n    metadata::TMeta\nend\n\ndim: dimension of the problem\nTF: number type for computations and coordinates\nN: number of nodes in a cell of the grid\ninp_content: an instance of InpContent which stores all the information from the `.inp file.\ngeom_order: a field equal to Val{GO} where GO is an integer representing the order of the finite elements. Linear elements have a geom_order of Val{1} and quadratic elements have a geom_order of Val{2}.\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.InputOutput.INP.InpStiffness-Tuple{AbstractString}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.InputOutput.INP.InpStiffness","text":"InpStiffness(filepath::AbstractString; keep_load_cells = false)\n\nImports stiffness problem from a .inp file, e.g. InpStiffness(\"example.inp\"). The keep_load_cells keyword argument will enforce that any cell with a load applied on it is to be part of the final optimal design generated by topology optimization algorithms.\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"IO.INP.Parser.InpContent","category":"page"},{"location":"reference/TopOptProblems/#Grids","page":"TopOptProblems","title":"Grids","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"Grid types are defined in TopOptProblems because a number of topology optimization problems share the same underlying grid but apply the loads and boundary conditions at different locations. For example, the PointLoadCantilever and HalfMBB problems use the same rectilinear grid type, RectilinearGrid, under the hood. The LBeam problem uses the LGrid function under the hood to construct an L-shaped Ferrite.Grid. New problem types can be defined using the same grids but different loads or boundary conditions.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"RectilinearGrid\nRectilinearGrid(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim,T}) where {dim, T, CellType}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.RectilinearGrid","page":"TopOptProblems","title":"TopOpt.TopOptProblems.RectilinearGrid","text":"struct RectilinearGrid{dim, T, N, M, TG<:Ferrite.Grid{dim, <:Ferrite.Cell{dim,N,M}, T}} <: AbstractGrid{dim, T}\n    grid::TG\n    nels::NTuple{dim, Int}\n    sizes::NTuple{dim, T}\n    corners::NTuple{2, Vec{dim, T}}\n    white_cells::BitVector\n    black_cells::BitVector\n    constant_cells::BitVector\nend\n\nA type that represents a rectilinear grid with corner points corners.\n\ndim: dimension of the problem\nT: number type for computations and coordinates\nN: number of nodes in a cell of the grid\nM: number of faces in a cell of the grid\ngrid: a Ferrite.Grid struct\nnels: number of elements in every dimension\nsizes: dimensions of each rectilinear cell\ncorners: 2 corner points of the rectilinear grid\nwhite_cells: cells fixed to be void during optimization\nblack_cells: cells fixed to have material during optimization\nconstant_cells: cells fixed to be either void or have material during optimization\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.RectilinearGrid-Union{Tuple{CellType}, Tuple{T}, Tuple{dim}, Tuple{Type{Val{CellType}}, Tuple{Vararg{Int64, dim}}, Tuple{Vararg{T, dim}}}} where {dim, T, CellType}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.RectilinearGrid","text":"RectilinearGrid(::Type{Val{CellType}}, nels::NTuple{dim,Int}, sizes::NTuple{dim,T}) where {dim, T, CellType}\n\nConstructs an instance of RectilinearGrid.\n\ndim: dimension of the problem\nT: number type for coordinates\nnels: number of elements in every dimension\nsizes: dimensions of each rectilinear cell\n\nExample:\n\nrectgrid = RectilinearGrid((60,20), (1.0,1.0))\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"LGrid","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.LGrid","page":"TopOptProblems","title":"TopOpt.TopOptProblems.LGrid","text":"LGrid(::Type{Val{CellType}}, ::Type{T}; length = 100, height = 100, upperslab = 50, lowerslab = 50) where {T, CellType}\nLGrid(::Type{Val{CellType}}, nel1::NTuple{2,Int}, nel2::NTuple{2,Int}, LL::Vec{2,T}, UR::Vec{2,T}, MR::Vec{2,T}) where {CellType, T}\n\nConstructs a Ferrite.Grid that represents the following L-shaped grid.\n\n        upperslab   UR\n       ............\n       .          .\n       .          .\n       .          . \nheight .          .                     MR\n       .          ......................\n       .                               .\n       .                               . lowerslab\n       .                               .\n       .................................\n     LL             length\n\n\n\nExamples:\n\nLGrid(upperslab = 30, lowerslab = 70)\nLGrid(Val{:Linear}, (2, 4), (2, 2), Vec{2,Float64}((0.0,0.0)), Vec{2,Float64}((2.0, 4.0)), Vec{2,Float64}((4.0, 2.0)))\n\n\n\n\n\n","category":"function"},{"location":"reference/TopOptProblems/#Finite-element-backend","page":"TopOptProblems","title":"Finite element backend","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"Currently, TopOpt uses Ferrite.jl for FEA-related modeling.  This means that all the problems above are described in the language and types of Ferrite.","category":"page"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"We used to use a forked version of Ferrite.jl for GPU support but the main package should also work on the CPU. Currently, these features are disabled.","category":"page"},{"location":"reference/TopOptProblems/#Matrices-and-vectors","page":"TopOptProblems","title":"Matrices and vectors","text":"","category":"section"},{"location":"reference/TopOptProblems/#ElementFEAInfo","page":"TopOptProblems","title":"ElementFEAInfo","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"ElementFEAInfo\nElementFEAInfo(sp, quad_order, ::Type{Val{mat_type}}) where {mat_type}","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.ElementFEAInfo","page":"TopOptProblems","title":"TopOpt.TopOptProblems.ElementFEAInfo","text":"struct ElementFEAInfo{dim, T}\n    Kes::AbstractVector{<:AbstractMatrix{T}}\n    fes::AbstractVector{<:AbstractVector{T}}\n    fixedload::AbstractVector{T}\n    cellvolumes::AbstractVector{T}\n    cellvalues::CellValues{dim, T}\n    facevalues::FaceValues{<:Any, T}\n    metadata::Metadata\n    black::AbstractVector\n    white::AbstractVector\n    varind::AbstractVector{Int}\n    cells\nend\n\nAn instance of the ElementFEAInfo type stores element information such as:\n\nKes: the element stiffness matrices,\nfes: the element load vectors,\ncellvolumes: the element volumes,\ncellvalues and facevalues: two Ferrite types that facilitate cell and face iteration and queries.\nmetadata: that stores degree of freedom (dof) to node mapping, dof to cell mapping, etc.\nblack: a BitVector such that black[i] is 1 iff element i must be part of any feasible design.\nwhite: a BitVector such that white[i] is 1 iff element i must never be part of any feasible design.\nvarind: a vector such that varind[i] gives the decision variable index of element i.\ncells: the cell connectivities.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.ElementFEAInfo-Union{Tuple{mat_type}, Tuple{Any, Any, Type{Val{mat_type}}}} where mat_type","page":"TopOptProblems","title":"TopOpt.TopOptProblems.ElementFEAInfo","text":"ElementFEAInfo(sp, quad_order=2, ::Type{Val{mat_type}}=Val{:Static}) where {mat_type}\n\nConstructs an instance of ElementFEAInfo from a stiffness problem sp using a Gaussian quadrature order of quad_order. The element matrix and vector types will be:\n\nSMatrix and SVector if mat_type is :SMatrix or :Static, the default,\nMMatrix and MVector if mat_type is :MMatrix, or\nMatrix and Vector otherwise.\n\nThe static matrices and vectors are more performant and GPU-compatible therefore they are used by default.\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/#GlobalFEAInfo","page":"TopOptProblems","title":"GlobalFEAInfo","text":"","category":"section"},{"location":"reference/TopOptProblems/","page":"TopOptProblems","title":"TopOptProblems","text":"GlobalFEAInfo\nGlobalFEAInfo(::Type{T}=Float64) where {T}\nGlobalFEAInfo(sp::StiffnessTopOptProblem)","category":"page"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.GlobalFEAInfo","page":"TopOptProblems","title":"TopOpt.TopOptProblems.GlobalFEAInfo","text":"struct GlobalFEAInfo{T, TK<:AbstractMatrix{T}, Tf<:AbstractVector{T}, Tchol}\n    K::TK\n    f::Tf\n    cholK::Tchol\nend\n\nAn instance of GlobalFEAInfo hosts the global stiffness matrix K, the load vector f and the cholesky decomposition of the K, cholK.\n\n\n\n\n\n","category":"type"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.GlobalFEAInfo-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"TopOptProblems","title":"TopOpt.TopOptProblems.GlobalFEAInfo","text":"GlobalFEAInfo(::Type{T}=Float64) where {T}\n\nConstructs an empty instance of GlobalFEAInfo where the field K is an empty sparse matrix of element type T and the field f is an empty dense vector of element type T.\n\n\n\n\n\n","category":"method"},{"location":"reference/TopOptProblems/#TopOpt.TopOptProblems.GlobalFEAInfo-Tuple{StiffnessTopOptProblem}","page":"TopOptProblems","title":"TopOpt.TopOptProblems.GlobalFEAInfo","text":"GlobalFEAInfo(sp::StiffnessTopOptProblem)\n\nConstructs an instance of GlobalFEAInfo where the field K is a sparse matrix with the correct size and sparsity pattern for the problem instance sp. The field f is a dense vector of the appropriate size. The values in K and f are meaningless though and require calling the function assemble! to update.\n\n\n\n\n\n","category":"method"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"EditURL = \"https://github.com/mohamed82008/TopOpt.jl/blob/master/docs/src/literate/geso.jl\"","category":"page"},{"location":"examples/geso/#GESO-example:-HalfMBB-Beam","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"tip: Tip\nThis example is also available as a Jupyter notebook: geso.ipynb","category":"page"},{"location":"examples/geso/#Commented-Program","page":"GESO example: HalfMBB Beam","title":"Commented Program","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"What follows is a program spliced with comments. The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"using TopOpt","category":"page"},{"location":"examples/geso/#Define-the-problem","page":"GESO example: HalfMBB Beam","title":"Define the problem","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"E = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (160, 40)\nproblem = HalfMBB(Val{:Linear}, nels, (1.0, 1.0), E, v, f)","category":"page"},{"location":"examples/geso/#Define-the-FEA-Solver-and-penalty-functions","page":"GESO example: HalfMBB Beam","title":"Define the FEA Solver and penalty functions","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"solver = FEASolver(Displacement, Direct, problem, xmin = 0.01, penalty = TopOpt.PowerPenalty(3.0))","category":"page"},{"location":"examples/geso/#Define-the-compliance-objective-function-and-volume-fraction-constraint","page":"GESO example: HalfMBB Beam","title":"Define the compliance objective function and volume fraction constraint","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"comp = Compliance(problem, solver)\nvolfrac = Volume(problem, solver)\nsensfilter = SensFilter(solver, rmin = 4.0)\ngeso = GESO(comp, volfrac, 0.5, sensfilter)","category":"page"},{"location":"examples/geso/#Run-optimization","page":"GESO example: HalfMBB Beam","title":"Run optimization","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"x0 = ones(length(solver.vars))\nresult = geso(x0)","category":"page"},{"location":"examples/geso/#(Optional)-Visualize-the-result-using-Makie.jl","page":"GESO example: HalfMBB Beam","title":"(Optional) Visualize the result using Makie.jl","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"Need to run using Pkg; Pkg.add(Makie) first","category":"page"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"using TopOpt.TopOptProblems.Visualization: visualize\nfig = visualize(problem; topology = result.topology)\nMakie.display(fig)","category":"page"},{"location":"examples/geso/#geso-plain-program","page":"GESO example: HalfMBB Beam","title":"Plain Program","text":"","category":"section"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"Below follows a version of the program without any comments. The file is also available here: geso.jl","category":"page"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"using TopOpt\n\nE = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (160, 40)\nproblem = HalfMBB(Val{:Linear}, nels, (1.0, 1.0), E, v, f)\n\nsolver = FEASolver(Displacement, Direct, problem, xmin = 0.01, penalty = TopOpt.PowerPenalty(3.0))\n\ncomp = Compliance(problem, solver)\nvolfrac = Volume(problem, solver)\nsensfilter = SensFilter(solver, rmin = 4.0)\ngeso = GESO(comp, volfrac, 0.5, sensfilter)\n\nx0 = ones(length(solver.vars))\nresult = geso(x0)\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"","category":"page"},{"location":"examples/geso/","page":"GESO example: HalfMBB Beam","title":"GESO example: HalfMBB Beam","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"EditURL = \"https://github.com/mohamed82008/TopOpt.jl/blob/master/docs/src/literate/simp.jl\"","category":"page"},{"location":"examples/simp/#SIMP-example:-Point-Load-Cantilever","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"tip: Tip\nThis example is also available as a Jupyter notebook: simp.ipynb","category":"page"},{"location":"examples/simp/#Commented-Program","page":"SIMP example: Point Load Cantilever","title":"Commented Program","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"What follows is a program spliced with comments. The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"using TopOpt","category":"page"},{"location":"examples/simp/#Define-the-problem","page":"SIMP example: Point Load Cantilever","title":"Define the problem","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"E = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (30, 10, 10)\nproblem = PointLoadCantilever(Val{:Linear}, nels, (1.0, 1.0, 1.0), E, v, f);\nnothing #hide","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"See also the detailed API of PointLoadCantilever:","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"TopOpt.TopOptProblems.PointLoadCantilever","category":"page"},{"location":"examples/simp/#TopOpt.TopOptProblems.PointLoadCantilever","page":"SIMP example: Point Load Cantilever","title":"TopOpt.TopOptProblems.PointLoadCantilever","text":"///**********************************\n///*                                *\n///*                                * |\n///*                                * |\n///********************************** v\n\n\n@params struct PointLoadCantilever{dim, T, N, M} <: StiffnessTopOptProblem{dim, T}\n    rect_grid::RectilinearGrid{dim, T, N, M}\n    E::T\n    ν::T\n    ch::ConstraintHandler{<:DofHandler{dim, <:Cell{dim,N,M}, T}, T}\n    force::T\n    force_dof::Integer\n    black::AbstractVector\n    white::AbstractVector\n    varind::AbstractVector{Int}\n    metadata::Metadata\nend\n\ndim: dimension of the problem\nT: number type for computations and coordinates\nN: number of nodes in a cell of the grid\nM: number of faces in a cell of the grid\nrect_grid: a RectilinearGrid struct\nE: Young's modulus\nν: Poisson's ration\nforce: force at the center right of the cantilever beam (positive is downward)\nforce_dof: dof number at which the force is applied\nch: a Ferrite.ConstraintHandler struct\nmetadata: Metadata having various cell-node-dof relationships\nblack: a BitVector of length equal to the number of elements where black[e] is 1 iff the e^th element must be part of the final design\nwhite:  a BitVector of length equal to the number of elements where white[e] is 1 iff the e^th element must not be part of the final design\nvarind: an AbstractVector{Int} of length equal to the number of elements where varind[e] gives the index of the decision variable corresponding to element e. Because some elements can be fixed to be black or white, not every element has a decision variable associated.\n\n\n\n\n\n","category":"type"},{"location":"examples/simp/#Parameter-settings","page":"SIMP example: Point Load Cantilever","title":"Parameter settings","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"V = 0.3 # volume fraction\nxmin = 1e-6 # minimum density\nrmin = 2.0; # density filter radius\nnothing #hide","category":"page"},{"location":"examples/simp/#Define-a-finite-element-solver","page":"SIMP example: Point Load Cantilever","title":"Define a finite element solver","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"penalty = TopOpt.PowerPenalty(3.0)\nsolver = FEASolver(\n    Displacement, Direct, problem, xmin = xmin, penalty = penalty,\n)","category":"page"},{"location":"examples/simp/#Define-compliance-objective","page":"SIMP example: Point Load Cantilever","title":"Define compliance objective","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"comp = TopOpt.Compliance(problem, solver)\nfilter = DensityFilter(solver, rmin = rmin)\nobj = x -> comp(filter(x))","category":"page"},{"location":"examples/simp/#Define-volume-constraint","page":"SIMP example: Point Load Cantilever","title":"Define volume constraint","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"volfrac = TopOpt.Volume(problem, solver)\nconstr = x -> volfrac(filter(x)) - V","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"You can enable the iteration printouts with Nonconvex.show_residuals[] = true","category":"page"},{"location":"examples/simp/#Define-subproblem-optimizer","page":"SIMP example: Point Load Cantilever","title":"Define subproblem optimizer","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"mma_options = options = Nonconvex.MMAOptions(\n    maxiter = 3000, tol = Nonconvex.Tolerance(x = 1e-3, f = 1e-3, kkt = 0.001),\n)\nconvcriteria = Nonconvex.KKTCriteria()\nx0 = fill(V, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = mma_options, convcriteria = convcriteria,\n)","category":"page"},{"location":"examples/simp/#Define-SIMP-optimizer","page":"SIMP example: Point Load Cantilever","title":"Define SIMP optimizer","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"simp = SIMP(optimizer, solver, penalty.p);\nnothing #hide","category":"page"},{"location":"examples/simp/#Solve","page":"SIMP example: Point Load Cantilever","title":"Solve","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"result = simp(x0);\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval","category":"page"},{"location":"examples/simp/#(Optional)-Visualize-the-result-using-Makie.jl","page":"SIMP example: Point Load Cantilever","title":"(Optional) Visualize the result using Makie.jl","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"Need to run using Pkg; Pkg.add(Makie) first","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"using TopOpt.TopOptProblems.Visualization: visualize\nfig = visualize(problem; topology = result.topology,\n    problem; topology = result.topology, default_exagg_scale = 0.07,\n    scale_range = 10.0, vector_linewidth = 3, vector_arrowsize = 0.5,\n)\nMakie.display(fig)","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"or convert it to a Mesh Need to run using Pkg; Pkg.add(GeometryBasics) first","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"import Makie, GeometryBasics\nresult_mesh = GeometryBasics.Mesh(problem, result.topology);\nMakie.mesh(result_mesh)","category":"page"},{"location":"examples/simp/#simp-plain-program","page":"SIMP example: Point Load Cantilever","title":"Plain Program","text":"","category":"section"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"Below follows a version of the program without any comments. The file is also available here: simp.jl","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"using TopOpt\n\nE = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (30, 10, 10)\nproblem = PointLoadCantilever(Val{:Linear}, nels, (1.0, 1.0, 1.0), E, v, f);\n\nV = 0.3 # volume fraction\nxmin = 1e-6 # minimum density\nrmin = 2.0; # density filter radius\n\npenalty = TopOpt.PowerPenalty(3.0)\nsolver = FEASolver(\n    Displacement, Direct, problem, xmin = xmin, penalty = penalty,\n)\n\ncomp = TopOpt.Compliance(problem, solver)\nfilter = DensityFilter(solver, rmin = rmin)\nobj = x -> comp(filter(x))\n\nvolfrac = TopOpt.Volume(problem, solver)\nconstr = x -> volfrac(filter(x)) - V\n\nmma_options = options = Nonconvex.MMAOptions(\n    maxiter = 3000, tol = Nonconvex.Tolerance(x = 1e-3, f = 1e-3, kkt = 0.001),\n)\nconvcriteria = Nonconvex.KKTCriteria()\nx0 = fill(V, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = mma_options, convcriteria = convcriteria,\n)\n\nsimp = SIMP(optimizer, solver, penalty.p);\n\nresult = simp(x0);\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"","category":"page"},{"location":"examples/simp/","page":"SIMP example: Point Load Cantilever","title":"SIMP example: Point Load Cantilever","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"EditURL = \"https://github.com/mohamed82008/TopOpt.jl/blob/master/docs/src/literate/global_stress.jl\"","category":"page"},{"location":"examples/global_stress/#Global-stress-objective-example","page":"Global stress objective example","title":"Global stress objective example","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"tip: Tip\nThis example is also available as a Jupyter notebook: global_stress.ipynb","category":"page"},{"location":"examples/global_stress/#Commented-Program","page":"Global stress objective example","title":"Commented Program","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"What follows is a program spliced with comments. The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"using TopOpt, LinearAlgebra","category":"page"},{"location":"examples/global_stress/#Define-the-problem","page":"Global stress objective example","title":"Define the problem","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"E = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0 # downward force\nrmin = 3.0 # filter radius\n\nproblems = Any[\n    PointLoadCantilever(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n    HalfMBB(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n]\nproblem_names = [\n    \"Cantilever beam\",\n    \"Half MBB beam\",\n    \"L-beam\",\n    \"Tie-beam\",\n]\n\ni = 1\nprintln(problem_names[i])\nproblem = problems[i]","category":"page"},{"location":"examples/global_stress/#Parameter-settings","page":"Global stress objective example","title":"Parameter settings","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"V = 0.5 # volume fraction\nxmin = 0.001 # minimum density\nsteps = 40 # maximum number of penalty steps, delta_p0 = 0.1\nconvcriteria = Nonconvex.KKTCriteria()\npenalty = TopOpt.PowerPenalty(1.0)","category":"page"},{"location":"examples/global_stress/#Define-a-finite-element-solver","page":"Global stress objective example","title":"Define a finite element solver","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"solver = FEASolver(\n    Displacement, Direct, problem, xmin = xmin, penalty = penalty,\n)","category":"page"},{"location":"examples/global_stress/#Define-**stress**-objective","page":"Global stress objective example","title":"Define stress objective","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"Notice that gradient is derived automatically by automatic differentiation (Zygote.jl)!","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"stress = TopOpt.MicroVonMisesStress(solver)\nfilter = if problem isa TopOptProblems.TieBeam\n    identity\nelse\n    DensityFilter(solver, rmin = rmin)\nend\nvolfrac = TopOpt.Volume(problem, solver)\n\nobj = x -> volfrac(filter(x))\nconstr = x -> norm(stress(filter(x)), 5) - 1.0\noptions = Nonconvex.MMAOptions(\n    maxiter=2000, tol = Nonconvex.Tolerance(kkt = 1e-4),\n)","category":"page"},{"location":"examples/global_stress/#Define-subproblem-optimizer","page":"Global stress objective example","title":"Define subproblem optimizer","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"x0 = fill(1.0, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = options, convcriteria = convcriteria,\n)","category":"page"},{"location":"examples/global_stress/#Define-continuation-SIMP-optimizer","page":"Global stress objective example","title":"Define continuation SIMP optimizer","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"simp = SIMP(optimizer, solver, 3.0)","category":"page"},{"location":"examples/global_stress/#Solve","page":"Global stress objective example","title":"Solve","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"result = simp(x0)\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval","category":"page"},{"location":"examples/global_stress/#(Optional)-Visualize-the-result-using-Makie.jl","page":"Global stress objective example","title":"(Optional) Visualize the result using Makie.jl","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"Need to run using Pkg; Pkg.add(Makie) first","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"using TopOpt.TopOptProblems.Visualization: visualize\nfig = visualize(problem; topology = result.topology)\nMakie.display(fig)","category":"page"},{"location":"examples/global_stress/#global-stress-plain-program","page":"Global stress objective example","title":"Plain Program","text":"","category":"section"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"Below follows a version of the program without any comments. The file is also available here: global-stress.jl","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"using TopOpt, LinearAlgebra\n\nE = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0 # downward force\nrmin = 3.0 # filter radius\n\nproblems = Any[\n    PointLoadCantilever(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n    HalfMBB(Val{:Linear}, (60, 20), (1.0, 1.0), E, v, f),\n]\nproblem_names = [\n    \"Cantilever beam\",\n    \"Half MBB beam\",\n    \"L-beam\",\n    \"Tie-beam\",\n]\n\ni = 1\nprintln(problem_names[i])\nproblem = problems[i]\n\nV = 0.5 # volume fraction\nxmin = 0.001 # minimum density\nsteps = 40 # maximum number of penalty steps, delta_p0 = 0.1\nconvcriteria = Nonconvex.KKTCriteria()\npenalty = TopOpt.PowerPenalty(1.0)\n\nsolver = FEASolver(\n    Displacement, Direct, problem, xmin = xmin, penalty = penalty,\n)\n\nstress = TopOpt.MicroVonMisesStress(solver)\nfilter = if problem isa TopOptProblems.TieBeam\n    identity\nelse\n    DensityFilter(solver, rmin = rmin)\nend\nvolfrac = TopOpt.Volume(problem, solver)\n\nobj = x -> volfrac(filter(x))\nconstr = x -> norm(stress(filter(x)), 5) - 1.0\noptions = Nonconvex.MMAOptions(\n    maxiter=2000, tol = Nonconvex.Tolerance(kkt = 1e-4),\n)\n\nx0 = fill(1.0, length(solver.vars))\noptimizer = Optimizer(\n    obj, constr, x0, Nonconvex.MMA87(),\n    options = options, convcriteria = convcriteria,\n)\n\nsimp = SIMP(optimizer, solver, 3.0)\n\nresult = simp(x0)\n\n@show result.convstate\n@show optimizer.workspace.iter\n@show result.objval\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"","category":"page"},{"location":"examples/global_stress/","page":"Global stress objective example","title":"Global stress objective example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"EditURL = \"https://github.com/mohamed82008/TopOpt.jl/blob/master/docs/src/literate/beso.jl\"","category":"page"},{"location":"examples/beso/#BESO-example:-HalfMBB-Beam","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"tip: Tip\nThis example is also available as a Jupyter notebook: beso.ipynb","category":"page"},{"location":"examples/beso/#Commented-Program","page":"BESO example: HalfMBB Beam","title":"Commented Program","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"What follows is a program spliced with comments. The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"using TopOpt","category":"page"},{"location":"examples/beso/#Define-the-problem","page":"BESO example: HalfMBB Beam","title":"Define the problem","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"E = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (160, 40)\nproblem = HalfMBB(Val{:Linear}, nels, (1.0, 1.0), E, v, f)","category":"page"},{"location":"examples/beso/#Define-the-FEA-Solver-and-penalty-functions","page":"BESO example: HalfMBB Beam","title":"Define the FEA Solver and penalty functions","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"solver = FEASolver(Displacement, Direct, problem, xmin = 0.01, penalty = TopOpt.PowerPenalty(3.0))","category":"page"},{"location":"examples/beso/#Define-the-compliance-objective-function-and-volume-fraction-constraint","page":"BESO example: HalfMBB Beam","title":"Define the compliance objective function and volume fraction constraint","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"comp = Compliance(problem, solver)\nvolfrac = Volume(problem, solver)\nsensfilter = SensFilter(solver, rmin = 4.0)\nbeso = BESO(comp, volfrac, 0.5, sensfilter)","category":"page"},{"location":"examples/beso/#Run-optimization","page":"BESO example: HalfMBB Beam","title":"Run optimization","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"x0 = ones(length(solver.vars))\nresult = beso(x0)","category":"page"},{"location":"examples/beso/#(Optional)-Visualize-the-result-using-Makie.jl","page":"BESO example: HalfMBB Beam","title":"(Optional) Visualize the result using Makie.jl","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"Need to run using Pkg; Pkg.add(Makie) first","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"using TopOpt.TopOptProblems.Visualization: visualize\nfig = visualize(problem; topology = result.topology)\nMakie.display(fig)","category":"page"},{"location":"examples/beso/#beso-plain-program","page":"BESO example: HalfMBB Beam","title":"Plain Program","text":"","category":"section"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"Below follows a version of the program without any comments. The file is also available here: beso.jl","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"using TopOpt\n\nE = 1.0 # Young’s modulus\nv = 0.3 # Poisson’s ratio\nf = 1.0; # downward force\n\nnels = (160, 40)\nproblem = HalfMBB(Val{:Linear}, nels, (1.0, 1.0), E, v, f)\n\nsolver = FEASolver(Displacement, Direct, problem, xmin = 0.01, penalty = TopOpt.PowerPenalty(3.0))\n\ncomp = Compliance(problem, solver)\nvolfrac = Volume(problem, solver)\nsensfilter = SensFilter(solver, rmin = 4.0)\nbeso = BESO(comp, volfrac, 0.5, sensfilter)\n\nx0 = ones(length(solver.vars))\nresult = beso(x0)\n\n# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"","category":"page"},{"location":"examples/beso/","page":"BESO example: HalfMBB Beam","title":"BESO example: HalfMBB Beam","text":"This page was generated using Literate.jl.","category":"page"},{"location":"bibliography/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"bibliography/","page":"Bibliography","title":"Bibliography","text":"","category":"page"},{"location":"#TopOpt.jl-Documentation","page":"Home","title":"TopOpt.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TopOpt is a topology optimization package written in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nTopOpt is still under development. If you find a bug, or have ideas for improvements, feel free to open an issue or make a pull request on the TopOpt GitHub page.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install TopOpt.jl, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add TopOpt\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"To additionally load the visualization submodule of TopOpt, you will need to install Makie.jl using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"add Makie\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package, use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TopOpt","category":"page"},{"location":"","page":"Home","title":"Home","text":"and to optionally load the visualization sub-module as part of TopOpt, use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TopOpt, Makie","category":"page"}]
}
